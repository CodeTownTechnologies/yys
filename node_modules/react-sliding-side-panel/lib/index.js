"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactTransitionGroup = require("react-transition-group");

require("./index.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getPanelGlassStyle = function getPanelGlassStyle(type, size, hidden) {
  var horizontal = type === 'bottom' || type === 'top';
  return _objectSpread({
    width: horizontal ? "".concat(hidden ? '0' : '100', "vw") : "".concat(100 - size, "vw"),
    height: horizontal ? "".concat(100 - size, "vh") : "".concat(hidden ? '0' : '100', "vh")
  }, type === 'right' && {
    left: 0
  }, {}, type === 'top' && {
    bottom: 0
  }, {
    position: 'inherit'
  });
};

var getPanelStyle = function getPanelStyle(type, size) {
  var horizontal = type === 'bottom' || type === 'top';
  return _objectSpread({
    width: horizontal ? '100vw' : "".concat(size, "vw"),
    height: horizontal ? "".concat(size, "vh") : '100vh'
  }, type === 'right' && {
    right: 0
  }, {}, type === 'bottom' && {
    bottom: 0
  }, {
    position: 'inherit',
    overflow: 'auto'
  });
};

var SlidingPanel = function SlidingPanel(_ref) {
  var type = _ref.type,
      size = _ref.size,
      panelContainerClassName = _ref.panelContainerClassName,
      panelClassName = _ref.panelClassName,
      isOpen = _ref.isOpen,
      onOpen = _ref.onOpen,
      onOpening = _ref.onOpening,
      onOpened = _ref.onOpened,
      onClose = _ref.onClose,
      onClosing = _ref.onClosing,
      onClosed = _ref.onClosed,
      backdropClicked = _ref.backdropClicked,
      noBackdrop = _ref.noBackdrop,
      children = _ref.children;
  var glassBefore = type === 'right' || type === 'bottom';
  var horizontal = type === 'bottom' || type === 'top';
  return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "sliding-panel-container ".concat(isOpen ? 'active' : '', " ").concat(noBackdrop ? 'click-through' : '')
  }, /*#__PURE__*/_react["default"].createElement(_reactTransitionGroup.CSSTransition, {
    "in": isOpen,
    timeout: 500,
    classNames: "panel-container-".concat(type),
    unmountOnExit: true,
    onEnter: function onEnter(node, isAppearing) {
      return onOpen(node, isAppearing);
    },
    onEntering: function onEntering(node, isAppearing) {
      return onOpening(node, isAppearing);
    },
    onEntered: function onEntered(node, isAppearing) {
      return onOpened(node, isAppearing);
    },
    onExit: function onExit(node) {
      return onClose(node);
    },
    onExiting: function onExiting(node) {
      return onClosing(node);
    },
    onExited: function onExited(node) {
      return onClosed(node);
    },
    style: {
      display: horizontal ? 'block' : 'flex'
    }
  }, /*#__PURE__*/_react["default"].createElement("div", null, glassBefore && /*#__PURE__*/_react["default"].createElement("div", {
    className: "glass",
    style: getPanelGlassStyle(type, size, noBackdrop),
    onClick: function onClick(e) {
      if (!noBackdrop) backdropClicked(e);
    }
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: "panel ".concat(panelContainerClassName || ''),
    style: getPanelStyle(type, size)
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "panel-content ".concat(panelClassName || '')
  }, children)), !glassBefore && /*#__PURE__*/_react["default"].createElement("div", {
    className: "glass",
    style: getPanelGlassStyle(type, size, noBackdrop),
    onClick: function onClick(e) {
      if (!noBackdrop) backdropClicked(e);
    }
  })))));
};

SlidingPanel.propTypes = {
  type: _propTypes["default"].oneOf(['top', 'right', 'bottom', 'left']),
  size: _propTypes["default"].number,
  panelClassName: _propTypes["default"].string,
  panelContainerClassName: _propTypes["default"].string,
  isOpen: _propTypes["default"].bool.isRequired,
  onOpen: _propTypes["default"].func,
  onOpening: _propTypes["default"].func,
  onOpened: _propTypes["default"].func,
  onClose: _propTypes["default"].func,
  onClosing: _propTypes["default"].func,
  onClosed: _propTypes["default"].func,
  backdropClicked: _propTypes["default"].func,
  noBackdrop: _propTypes["default"].bool,
  children: _propTypes["default"].element
};
SlidingPanel.defaultProps = {
  type: 'left',
  size: 50,
  panelClassName: '',
  panelContainerClassName: '',
  onOpen: function onOpen() {
    return null;
  },
  onOpening: function onOpening() {
    return null;
  },
  onOpened: function onOpened() {
    return null;
  },
  onClose: function onClose() {
    return null;
  },
  onClosing: function onClosing() {
    return null;
  },
  onClosed: function onClosed() {
    return null;
  },
  backdropClicked: function backdropClicked() {
    return null;
  },
  noBackdrop: false,
  children: null
};
var _default = SlidingPanel;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,